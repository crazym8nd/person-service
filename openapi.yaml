openapi: 3.0.0
info:
  title: Person Service API
  version: 1.0.0
  description: |
    # Сервис управления данными пользователей
    
    Этот API предоставляет возможности для:
    - Управления данными пользователей (создание, обновление, удаление)
    - Управления адресами и странами
    - Работы с физическими лицами
    - Аудита изменений всех сущностей
    
    ## Основные сущности
    - Users (Пользователи)
    - Individuals (Физические лица)
    - Addresses (Адреса)
    - Countries (Страны)
    
    ## Статусы
    - ACTIVE - Активный
    - VERIFIED - Верифицированный
    - DELETED - Удаленный
    
    ## Аудит
    Все изменения сущностей отслеживаются в системе аудита.
    Доступна история изменений и просмотр конкретных ревизий.

servers:
  - url: http://localhost:8080
    description: Локальный сервер разработки

tags:
  - name: person
    description: Операции с основными сущностями системы- Пользователи, Физические лица, Адреса, Страны
  - name: audit
    description: Операции аудита-История изменений сущностей, Просмотр конкретных ревизий, Отслеживание изменений

paths:
  /api/v1/countries:
    get:
      tags:
        - person
      summary: Получить список стран
      description: |
        Возвращает список всех доступных стран в системе.
        Страны отсортированы по названию в алфавитном порядке.
      operationId: getCountries
      responses:
        '200':
          description: |
            Успешное получение списка стран.
            Возвращает массив объектов Country.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountryResponse'
              example:
                - id: 1
                  name: "Российская Федерация"
                  alpha2: "RU"
                  alpha3: "RUS"
                  status: "ACTIVE"
                  created: "2024-01-01T00:00:00Z"
                  updated: "2024-01-01T00:00:00Z"
                - id: 2
                  name: "Соединенные Штаты Америки"
                  alpha2: "US"
                  alpha3: "USA"
                  status: "ACTIVE"
                  created: "2024-01-01T00:00:00Z"
                  updated: "2024-01-01T00:00:00Z"
        '500':
          description: Внутренняя ошибка сервера
    post:
      tags:
        - person
      summary: Создать новую страну
      description: |
        Создает новую страну в системе.
        Все поля являются обязательными.
        Alpha2 и Alpha3 коды должны быть уникальными.
      operationId: createCountry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryRequest'
            example:
              name: "Германия"
              alpha2: "DE"
              alpha3: "DEU"
              status: "ACTIVE"
      responses:
        '201':
          description: |
            Страна успешно создана.
            Возвращает созданный объект Country с присвоенным ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResponse'
              example:
                id: 3
                name: "Германия"
                alpha2: "DE"
                alpha3: "DEU"
                status: "ACTIVE"
                created: "2024-01-01T00:00:00Z"
                updated: "2024-01-01T00:00:00Z"
        '400':
          description: Некорректные данные запроса
        '409':
          description: Конфликт (страна с таким кодом уже существует)
        '500':
          description: Внутренняя ошибка сервера

  /api/v1/countries/{id}:
    get:
      tags:
        - person
      summary: Получить страну по ID
      operationId: getCountryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешное получение страны
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResponse'
    put:
      tags:
        - person
      summary: Обновить страну
      operationId: updateCountry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryRequest'
      responses:
        '200':
          description: Страна успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryResponse'
    delete:
      tags:
        - person
      summary: Удалить страну
      operationId: deleteCountry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Страна успешно удалена

  /api/v1/addresses:
    get:
      tags:
        - person
      summary: Получить список адресов
      operationId: getAddresses
      responses:
        '200':
          description: Успешное получение списка адресов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddressResponse'
              example:
                - id: "550e8400-e29b-41d4-a716-446655440000"
                  country_id: 1
                  address: "ул. Ленина, д. 1"
                  zip_code: "123456"
                  city: "Москва"
                  state: "Московская область"
                  created: "2024-01-01T00:00:00Z"
                  updated: "2024-01-01T00:00:00Z"
                  archived: null
    post:
      tags:
        - person
      summary: Создать новый адрес
      operationId: createAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
            example:
              country_id: 1
              address: "ул. Ленина, д. 1"
              zip_code: "123456"
              city: "Москва"
              state: "Московская область"
      responses:
        '201':
          description: Адрес успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                country_id: 1
                address: "ул. Ленина, д. 1"
                zip_code: "123456"
                city: "Москва"
                state: "Московская область"
                created: "2024-01-01T00:00:00Z"
                updated: "2024-01-01T00:00:00Z"

  /api/v1/addresses/{id}:
    get:
      tags:
        - person
      summary: Получить адрес по ID
      operationId: getAddressById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение адреса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
    put:
      tags:
        - person
      summary: Обновить адрес
      operationId: updateAddress
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressRequest'
      responses:
        '200':
          description: Адрес успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressResponse'
    delete:
      tags:
        - person
      summary: Удалить адрес
      operationId: deleteAddress
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Адрес успешно удален

  /api/v1/users:
    get:
      tags:
        - person
      summary: Получить список пользователей
      description: |
        Возвращает список всех пользователей в системе.
        Пользователи отсортированы по дате создания (сначала новые).
      operationId: getUsers
      responses:
        '200':
          description: |
            Успешное получение списка пользователей.
            Возвращает массив объектов User.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
              example:
                - id: "550e8400-e29b-41d4-a716-446655440000"
                  first_name: "Иван"
                  last_name: "Иванов"
                  status: "ACTIVE"
                  verified_at: "2024-01-01T00:00:00Z"
                  archived_at: null
                  created: "2024-01-01T00:00:00Z"
                  updated: "2024-01-01T00:00:00Z"
                  address_id: "550e8400-e29b-41d4-a716-446655440001"
        '500':
          description: Внутренняя ошибка сервера
    post:
      tags:
        - person
      summary: Создать нового пользователя
      description: |
        Создает нового пользователя в системе.
        Обязательные поля:
        - first_name
        - last_name
        - status
        - address_id (должен существовать в системе)
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            example:
              first_name: "Иван"
              last_name: "Иванов"
              status: "ACTIVE"
              address_id: "550e8400-e29b-41d4-a716-446655440001"
      responses:
        '201':
          description: |
            Пользователь успешно создан.
            Возвращает созданный объект User с присвоенным ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Некорректные данные запроса
        '404':
          description: Указанный address_id не найден
        '500':
          description: Внутренняя ошибка сервера

  /api/v1/users/{id}:
    get:
      tags:
        - person
      summary: Получить пользователя по ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    patch:
      tags:
        - person
      summary: Обновить статус верификации пользователя
      operationId: updateUserVerificationStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVerificationRequest'
            example:
              status: "VERIFIED"
              verified_at: "2024-01-01T00:00:00Z"
      responses:
        '200':
          description: Статус верификации успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    put:
      tags:
        - person
      summary: Обновить пользователя
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Пользователь успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    delete:
      tags:
        - person
      summary: Удалить пользователя
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Пользователь успешно удален

  /api/v1/individuals:
    get:
      tags:
        - person
      summary: Получить список физических лиц
      operationId: getIndividuals
      responses:
        '200':
          description: Успешное получение списка физических лиц
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndividualResponse'
              example:
                - id: "550e8400-e29b-41d4-a716-446655440000"
                  user_id: "550e8400-e29b-41d4-a716-446655440001"
                  passport_number: "1234567890"
                  phone_number: "+79123456789"
                  email: "ivan@example.com"
                  created: "2024-01-01T00:00:00Z"
                  updated: "2024-01-01T00:00:00Z"
    post:
      tags:
        - person
      summary: Создать новое физическое лицо
      operationId: createIndividual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualRequest'
            example:
              user_id: "550e8400-e29b-41d4-a716-446655440001"
              passport_number: "1234567890"
              phone_number: "+79123456789"
              email: "ivan@example.com"
      responses:
        '201':
          description: Физическое лицо успешно создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                user_id: "550e8400-e29b-41d4-a716-446655440001"
                passport_number: "1234567890"
                phone_number: "+79123456789"
                email: "ivan@example.com"
                created: "2024-01-01T00:00:00Z"
                updated: "2024-01-01T00:00:00Z"

  /api/v1/individuals/{id}:
    get:
      tags:
        - person
      summary: Получить физическое лицо по ID
      operationId: getIndividualById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение физического лица
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
    put:
      tags:
        - person
      summary: Обновить физическое лицо
      operationId: updateIndividual
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualRequest'
      responses:
        '200':
          description: Физическое лицо успешно обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualResponse'
    delete:
      tags:
        - person
      summary: Удалить физическое лицо
      operationId: deleteIndividual
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Физическое лицо успешно удалено

  /api/v1/audit/users/{id}/history:
    get:
      tags:
        - audit
      summary: Получить историю изменений пользователя
      operationId: getUserHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение истории изменений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAuditResponse'
        '404':
          description: История изменений не найдена

  /api/v1/audit/users/{id}/revisions/{rev}:
    get:
      tags:
        - audit
      summary: Получить ревизию пользователя
      operationId: getUserRevision
      parameters:
        - $ref: '#/components/parameters/UuidParameter'
        - $ref: '#/components/parameters/RevisionParameter'
      responses:
        '200':
          description: Успешное получение ревизии
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuditResponse'
        '404':
          description: Ревизия не найдена

  /api/v1/audit/individuals/{id}/history:
    get:
      tags:
        - audit
      summary: Получить историю изменений физического лица
      operationId: getIndividualHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение истории изменений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndividualAuditResponse'
        '404':
          description: История изменений не найдена

  /api/v1/audit/individuals/{id}/revisions/{rev}:
    get:
      tags:
        - audit
      summary: Получить ревизию физического лица
      operationId: getIndividualRevision
      parameters:
        - $ref: '#/components/parameters/UuidParameter'
        - $ref: '#/components/parameters/RevisionParameter'
      responses:
        '200':
          description: Успешное получение ревизии
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualAuditResponse'
        '404':
          description: Ревизия не найдена

  /api/v1/audit/countries/{id}:
    get:
      tags:
        - audit
      summary: Получить историю изменений страны по ID
      operationId: getCountryHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешное получение истории
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountryAuditResponse'
        '404':
          description: Страна не найдена

  /api/v1/audit/countries/{id}/revisions/{rev}:
    get:
      tags:
        - audit
      summary: Получить ревизию страны
      operationId: getCountryRevision
      parameters:
        - $ref: '#/components/parameters/IdParameter'
        - $ref: '#/components/parameters/RevisionParameter'
      responses:
        '200':
          description: Успешное получение ревизии
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryAuditResponse'
        '404':
          description: Ревизия не найдена

  /api/v1/audit/addresses/{id}/history:
    get:
      tags:
        - audit
      summary: Получить историю изменений адреса
      operationId: getAddressHistory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успешное получение истории изменений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddressAuditResponse'
        '404':
          description: История изменений не найдена

  /api/v1/audit/addresses/{id}/revision/{rev}:
    get:
      tags:
        - audit
      summary: Получить конкретную ревизию адреса
      operationId: getAddressRevision
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: rev
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешное получение ревизии
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressAuditResponse'
        '404':
          description: Ревизия не найдена

components:
  parameters:
    RevisionParameter:
      name: rev
      in: path
      required: true
      schema:
        type: integer
        example: 1
    IdParameter:
      name: id
      in: path
      required: true
      schema:
        type: integer
    UuidParameter:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: "550e8400-e29b-41d4-a716-446655440000"

  schemas:
    CountryRequest:
      type: object
      properties:
        name:
          type: string
          example: "Российская Федерация"
        alpha2:
          type: string
          example: "RU"
        alpha3:
          type: string
          example: "RUS"
        status:
          type: string
          example: "ACTIVE"
      required:
        - name
        - alpha2
        - alpha3
        - status

    CountryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Российская Федерация"
        alpha2:
          type: string
          example: "RU"
        alpha3:
          type: string
          example: "RUS"
        status:
          type: string
          example: "ACTIVE"

    CountryAuditResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        revisionNumber:
          type: integer
          format: int32
          description: "Номер ревизии"
        revisionType:
          type: string
          description: "Тип изменения (ADD, MOD, DEL)"
          enum: [ "ADD", "MOD", "DEL" ]
        revisionInstant:
          type: string
          format: date-time
          description: "Временная метка ревизии"

    AddressRequest:
      type: object
      required:
        - country_id
        - address
        - zip_code
        - city
        - state
      properties:
        country_id:
          type: integer
          format: int64
        address:
          type: string
          maxLength: 128
        zip_code:
          type: string
          maxLength: 32
        city:
          type: string
          maxLength: 32
        state:
          type: string
          maxLength: 32

    AddressResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        countryId:
          type: integer
          format: int64
          example: 1
        address:
          type: string
          example: "ул. Ленина, д. 1"
        zipCode:
          type: string
          example: "123456"
        city:
          type: string
          example: "Москва"
        state:
          type: string
          example: "Московская область"
        archived:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-01T00:00:00Z"

    AddressAuditResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        revisionNumber:
          type: integer
          format: int32
          description: "Номер ревизии"
        revisionType:
          type: string
          description: "Тип изменения (ADD, MOD, DEL)"
          enum: [ "ADD", "MOD", "DEL" ]
        revisionInstant:
          type: string
          format: date-time
          description: "Временная метка ревизии"

    UserRequest:
      type: object
      required:
        - first_name
        - last_name
        - status
        - address_id
      properties:
        first_name:
          type: string
          maxLength: 32
        last_name:
          type: string
          maxLength: 32
        status:
          type: string
          maxLength: 64
        address_id:
          type: string
          format: uuid

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        firstName:
          type: string
          example: "Иван"
        lastName:
          type: string
          example: "Иванов"
        status:
          type: string
          example: "ACTIVE"
        verifiedAt:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-01T00:00:00Z"
        archivedAt:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-01T00:00:00Z"
        addressId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"

    UserAuditResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e84_uuid"
        revisionNumber:
          type: integer
          format: int32
          description: "Номер ревизии"
        revisionType:
          type: string
          description: "Тип изменения (ADD, MOD, DEL)"
          enum: [ "ADD", "MOD", "DEL" ]
        revisionInstant:
          type: string
          format: date-time
          description: "Временная метка ревизии"

    UserVerificationRequest:
      type: object
      required:
        - status
        - verified_at
      properties:
        status:
          type: string
          maxLength: 64
        verified_at:
          type: string
          format: date-time

    IndividualResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        passportNumber:
          type: string
          example: "1234 567890"
        phoneNumber:
          type: string
          example: "+79991234567"
        email:
          type: string
          example: "user@example.com"

    IndividualAuditResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        userId:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        revisionNumber:
          type: integer
          format: int32
          description: "Номер ревизии"
        revisionType:
          type: string
          description: "Тип изменения (ADD, MOD, DEL)"
          enum: [ "ADD", "MOD", "DEL" ]
        revisionInstant:
          type: string
          format: date-time
          description: "Временная метка ревизии"

    IndividualRequest:
      type: object
      required:
        - userId
        - passportNumber
        - phoneNumber
        - email
      properties:
        userId:
          type: string
          format: uuid
        passportNumber:
          type: string
          maxLength: 32
        phoneNumber:
          type: string
          maxLength: 32
        email:
          type: string
          maxLength: 32

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          description: "HTTP статус ошибки"
          example: 500
        message:
          type: string
          description: "Сообщение об ошибке"
          example: "Произошла внутренняя ошибка"
        details:
          type: string
          description: "Дополнительные детали ошибки"
          example: "Exception stack trace..." 