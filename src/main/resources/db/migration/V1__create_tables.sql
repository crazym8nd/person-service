CREATE SCHEMA IF NOT EXISTS person;

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Основная таблица для аудита
CREATE TABLE person.revinfo
(
    rev      INTEGER   NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    revtstmp TIMESTAMP NOT NULL,
    CONSTRAINT revinfo_pkey PRIMARY KEY (rev)
);

COMMENT ON TABLE person.revinfo IS 'Таблица для хранения информации об изменениях в системе';

-- Справочник стран
CREATE TABLE person.countries
(
    id         BIGSERIAL PRIMARY KEY,
    created_at TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(100) NOT NULL DEFAULT 'system',
    updated_by VARCHAR(100) NOT NULL DEFAULT 'system',
    name       VARCHAR(100) NOT NULL,
    alpha2     VARCHAR(2)   NOT NULL,
    alpha3     VARCHAR(3)   NOT NULL,
    status     VARCHAR(32)  NOT NULL DEFAULT 'ACTIVE',
    CONSTRAINT countries_alpha2_key UNIQUE (alpha2),
    CONSTRAINT countries_alpha3_key UNIQUE (alpha3)
);

COMMENT ON TABLE person.countries IS 'Справочник стран';

-- Таблица адресов
CREATE TABLE person.addresses
(
    id         UUID PRIMARY KEY      DEFAULT uuid_generate_v4(),
    created_at TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(100) NOT NULL DEFAULT 'system',
    updated_by VARCHAR(100) NOT NULL DEFAULT 'system',
    country_id BIGINT       NOT NULL REFERENCES person.countries (id),
    address    VARCHAR(255) NOT NULL,
    zip_code   VARCHAR(20)  NOT NULL,
    archived   TIMESTAMP,
    city       VARCHAR(100) NOT NULL,
    state      VARCHAR(100)
);

COMMENT ON TABLE person.addresses IS 'Таблица адресов пользователей';

-- Таблица пользователей
CREATE TABLE person.users
(
    id          UUID PRIMARY KEY      DEFAULT uuid_generate_v4(),
    secret_key  VARCHAR(32),
    created_at  TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by  VARCHAR(100) NOT NULL DEFAULT 'system',
    updated_by  VARCHAR(100) NOT NULL DEFAULT 'system',
    first_name  VARCHAR(100) NOT NULL,
    last_name   VARCHAR(100) NOT NULL,
    verified_at TIMESTAMP,
    archived_at TIMESTAMP,
    status      VARCHAR(32)  NOT NULL DEFAULT 'ACTIVE',
    address_id  UUID REFERENCES person.addresses (id)
);

COMMENT ON TABLE person.users IS 'Основная таблица пользователей системы';

-- Таблица физических лиц
CREATE TABLE person.individuals
(
    id              UUID PRIMARY KEY      DEFAULT uuid_generate_v4(),
    user_id         UUID         NOT NULL UNIQUE REFERENCES person.users (id),
    created_at      TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by      VARCHAR(100) NOT NULL DEFAULT 'system',
    updated_by      VARCHAR(100) NOT NULL DEFAULT 'system',
    passport_number VARCHAR(50)  NOT NULL,
    phone_number    VARCHAR(20)  NOT NULL,
    email           VARCHAR(255) NOT NULL
);

COMMENT ON TABLE person.individuals IS 'Таблица данных физических лиц';

-- Оптимизированные индексы
CREATE INDEX idx_addresses_country_id ON person.addresses (country_id);
CREATE INDEX idx_addresses_city ON person.addresses (city);
CREATE INDEX idx_addresses_archived ON person.addresses (archived) WHERE archived IS NOT NULL;

CREATE INDEX idx_users_status ON person.users (status);
CREATE INDEX idx_users_address_id ON person.users (address_id);
CREATE INDEX idx_users_names ON person.users (last_name, first_name);
CREATE INDEX idx_users_archived ON person.users (archived_at) WHERE archived_at IS NOT NULL;

CREATE INDEX idx_individuals_user_id ON person.individuals (user_id);
CREATE UNIQUE INDEX idx_individuals_email ON person.individuals (LOWER(email));
CREATE UNIQUE INDEX idx_individuals_phone_number ON person.individuals (phone_number);
CREATE INDEX idx_individuals_passport ON person.individuals (passport_number);

-- Аудит таблиц
CREATE TABLE person.users_aud
(
    id          UUID     NOT NULL,
    rev         INTEGER  NOT NULL,
    revtype     SMALLINT NOT NULL,
    secret_key  VARCHAR(32),
    first_name  VARCHAR(100),
    last_name   VARCHAR(100),
    verified_at TIMESTAMP,
    archived_at TIMESTAMP,
    status      VARCHAR(32),
    address_id  UUID,
    created_at  TIMESTAMP,
    created_by  VARCHAR(100),
    updated_at  TIMESTAMP,
    updated_by  VARCHAR(100),
    CONSTRAINT users_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT users_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);

CREATE TABLE person.individuals_aud
(
    id              UUID     NOT NULL,
    rev             INTEGER  NOT NULL,
    revtype         SMALLINT NOT NULL,
    user_id         UUID,
    passport_number VARCHAR(50),
    phone_number    VARCHAR(20),
    email           VARCHAR(255),
    created_at      TIMESTAMP,
    created_by      VARCHAR(100),
    updated_at      TIMESTAMP,
    updated_by      VARCHAR(100),
    CONSTRAINT individuals_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT individuals_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);

CREATE TABLE person.countries_aud
(
    id         BIGINT   NOT NULL,
    rev        INTEGER  NOT NULL,
    revtype    SMALLINT NOT NULL,
    name       VARCHAR(100),
    alpha2     VARCHAR(2),
    alpha3     VARCHAR(3),
    status     VARCHAR(32),
    created_at TIMESTAMP,
    created_by VARCHAR(100),
    updated_at TIMESTAMP,
    updated_by VARCHAR(100),
    CONSTRAINT countries_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT countries_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);

CREATE TABLE person.addresses_aud
(
    id         UUID     NOT NULL,
    rev        INTEGER  NOT NULL,
    revtype    SMALLINT NOT NULL,
    country_id BIGINT,
    address    VARCHAR(255),
    zip_code   VARCHAR(20),
    archived   TIMESTAMP,
    city       VARCHAR(100),
    state      VARCHAR(100),
    created_at TIMESTAMP,
    created_by VARCHAR(100),
    updated_at TIMESTAMP,
    updated_by VARCHAR(100),
    CONSTRAINT addresses_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT addresses_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);