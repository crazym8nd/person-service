CREATE SCHEMA IF NOT EXISTS person;

CREATE TABLE person.countries
(
    id      BIGSERIAL PRIMARY KEY,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    name    VARCHAR(32),
    alpha2  VARCHAR(2),
    alpha3  VARCHAR(3),
    status  VARCHAR(32)
);

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE person.addresses
(
    id         UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    created    TIMESTAMP NOT NULL,
    updated    TIMESTAMP NOT NULL,
    country_id BIGINT REFERENCES person.countries (id),
    address    VARCHAR(128),
    zip_code   VARCHAR(32),
    archived   TIMESTAMP NOT NULL,
    city       VARCHAR(32),
    state      VARCHAR(32)
);

CREATE TABLE person.users
(
    id          UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    secret_key  VARCHAR(32),
    created     TIMESTAMP NOT NULL,
    updated     TIMESTAMP NOT NULL,
    first_name  VARCHAR(32),
    last_name   VARCHAR(32),
    verified_at TIMESTAMP NOT NULL,
    archived_at TIMESTAMP NOT NULL,
    status      VARCHAR(64),
    address_id  UUID REFERENCES person.addresses (id)
);

CREATE TABLE person.individuals
(
    id              UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id         UUID UNIQUE REFERENCES person.users (id),
    created         TIMESTAMP NOT NULL,
    updated         TIMESTAMP NOT NULL,
    passport_number VARCHAR(32),
    phone_number    VARCHAR(32),
    email           VARCHAR(32)
);

-- Создаем индексы для оптимизации запросов
CREATE INDEX idx_addresses_country_id ON person.addresses (country_id);
CREATE INDEX idx_users_address_id ON person.users (address_id);
CREATE INDEX idx_users_status ON person.users (status);
CREATE INDEX idx_individuals_user_id ON person.individuals (user_id);
CREATE INDEX idx_individuals_email ON person.individuals (email);
CREATE INDEX idx_individuals_phone_number ON person.individuals (phone_number);

-- Rename existing audit columns
ALTER TABLE person.countries
    RENAME COLUMN created TO created_at;
ALTER TABLE person.countries
    RENAME COLUMN updated TO updated_at;

-- Add new audit columns to countries
ALTER TABLE person.countries
    ADD COLUMN created_by VARCHAR(255) NOT NULL DEFAULT 'system',
    ADD COLUMN updated_by VARCHAR(255) NOT NULL DEFAULT 'system';

-- Update addresses table
ALTER TABLE person.addresses
    RENAME COLUMN created TO created_at;
ALTER TABLE person.addresses
    RENAME COLUMN updated TO updated_at;
ALTER TABLE person.addresses
    ADD COLUMN created_by VARCHAR(255) NOT NULL DEFAULT 'system',
    ADD COLUMN updated_by VARCHAR(255) NOT NULL DEFAULT 'system';

-- Update users table
ALTER TABLE person.users
    RENAME COLUMN created TO created_at;
ALTER TABLE person.users
    RENAME COLUMN updated TO updated_at;
ALTER TABLE person.users
    ADD COLUMN created_by VARCHAR(255) NOT NULL DEFAULT 'system',
    ADD COLUMN updated_by VARCHAR(255) NOT NULL DEFAULT 'system';

-- Update individuals table
ALTER TABLE person.individuals
    RENAME COLUMN created TO created_at;
ALTER TABLE person.individuals
    RENAME COLUMN updated TO updated_at;
ALTER TABLE person.individuals
    ADD COLUMN created_by VARCHAR(255) NOT NULL DEFAULT 'system',
    ADD COLUMN updated_by VARCHAR(255) NOT NULL DEFAULT 'system';

CREATE TABLE person.revinfo
(
    rev      INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    revtstmp BIGINT,
    CONSTRAINT revinfo_pkey PRIMARY KEY (rev)
);

CREATE TABLE person.users_aud
(
    id          UUID    NOT NULL,
    rev         INTEGER NOT NULL,
    revtype     SMALLINT,
    secret_key  VARCHAR(32),
    first_name  VARCHAR(32),
    last_name   VARCHAR(32),
    verified_at TIMESTAMP WITHOUT TIME ZONE,
    archived_at TIMESTAMP WITHOUT TIME ZONE,
    status      VARCHAR(64),
    address_id  UUID,
    created_at  TIMESTAMP WITHOUT TIME ZONE,
    created_by  VARCHAR(255),
    updated_at  TIMESTAMP WITHOUT TIME ZONE,
    updated_by  VARCHAR(255),
    CONSTRAINT users_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT users_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);

CREATE TABLE person.individuals_aud
(
    id              UUID    NOT NULL,
    rev             INTEGER NOT NULL,
    revtype         SMALLINT,
    user_id         UUID,
    passport_number VARCHAR(32),
    phone_number    VARCHAR(32),
    email           VARCHAR(32),
    created_at      TIMESTAMP WITHOUT TIME ZONE,
    created_by      VARCHAR(255),
    updated_at      TIMESTAMP WITHOUT TIME ZONE,
    updated_by      VARCHAR(255),
    CONSTRAINT individuals_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT individuals_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);

CREATE TABLE person.countries_aud
(
    id         BIGINT  NOT NULL,
    rev        INTEGER NOT NULL,
    revtype    SMALLINT,
    name       VARCHAR(255),
    alpha2     VARCHAR(2),
    alpha3     VARCHAR(3),
    status     VARCHAR(64),
    created_at TIMESTAMP WITHOUT TIME ZONE,
    created_by VARCHAR(255),
    updated_at TIMESTAMP WITHOUT TIME ZONE,
    updated_by VARCHAR(255),
    CONSTRAINT countries_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT countries_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);

CREATE TABLE person.addresses_aud
(
    id         UUID    NOT NULL,
    rev        INTEGER NOT NULL,
    revtype    SMALLINT,
    created    TIMESTAMP WITHOUT TIME ZONE,
    updated    TIMESTAMP WITHOUT TIME ZONE,
    country_id BIGINT,
    address    VARCHAR(255),
    zip_code   VARCHAR(255),
    archived   TIMESTAMP WITHOUT TIME ZONE,
    city       VARCHAR(255),
    state      VARCHAR(255),
    created_at TIMESTAMP WITHOUT TIME ZONE,
    created_by VARCHAR(255),
    updated_at TIMESTAMP WITHOUT TIME ZONE,
    updated_by VARCHAR(255),
    CONSTRAINT addresses_aud_pkey PRIMARY KEY (id, rev),
    CONSTRAINT addresses_aud_rev_fk FOREIGN KEY (rev) REFERENCES person.revinfo (rev)
);